// array of all simulated Commands
//sim_commands = [ 
//"nw_uplink", "sim-agent", "sim-bind", "sim-cache", 
//"sim-cached", "sim-dhcpd", "sim-disk", "sim-health", 
//"sim-http", "sim-httpd", "sim-imap", "sim-interfacetable", 
//"sim-lb", "sim-lbd", "sim-load", "sim-maild", "sim-mail_echo", 
//"sim-mount_disk", "sim-mysqld", "sim-mysql-db", 
//"sim-mysql-repl", "sim-ntp", "sim-smtp", "sim-ssh", 
//"sim-storage", "sim-storaged", "sim-updates", "sim-interface" ] 
globals.sim_commands = {
  "nw_uplink" = {
    output_OK = "Link is up"
    output_WARN = "Packet loss on link"
    output_CRIT = "Link is down"
    perf_label = "pl"
    perf_data_OK_value_min = 0
    perf_data_OK_value_max = 0
    perf_data_warn_value_min = 1
    perf_data_warn_value_max = 2
    perf_data_crit_value_min = 4
    perf_data_crit_value_max = 4
    perf_data_warn = 1
    perf_data_crit = 4
  }
  "sim-agent" = {
    output_OK = "Agent is running"
    output_WARN = "Agent is running out of Resources"
    output_CRIT = "Agent unreachable"
  }
  "sim-bind" = {
    output_OK = "DNS zones up to date"
    output_WARN = "DNS zones out of date"
    output_CRIT = "Socket timed out"
  }
  "sim-cache" = {
    output_OK = "Caching is running"
    output_WARN = "Caching is running out of Resources"
    output_CRIT = "Caching unreachable"
  }
  "sim-dhcp" = {
    output_OK = "dhcp OK"
    output_WARN = "Only 5 leases left"
    output_CRIT = "dhcp error"
  }
  "sim-disk" = {
    output_OK = "Disks OK"
    output_WARN = "One Disk is running out of space"
    output_CRIT = "Disk is full"
  }
  "sim-health" = {
    output_OK = "Agent is running"
    output_WARN = "Agent is running out of Resources"
    output_CRIT = "Agent unreachable"
  }
  "sim-http" = {
    output_OK = "HTTP OK"
    output_WARN = "403: Forbidden"
    output_CRIT = "HTTP socket timed out"
  }
  "sim-imap" = {
    output_OK = "IMAP login successfull"
    output_WARN = "IMAP login successfull"
    output_CRIT = "IMAP login failed"
  }
  "sim-interfacetable" = {
    output_OK = "All Interfaces Up"
    output_WARN = "Bonding failed on Port"
    output_CRIT = "Link is down"
  }
  "sim-lb" = {
    output_OK = "Loadbalancing running"
    output_WARN = "Some Resources Down but all Services online"
    output_CRIT = "Service offline"
  }
  "sim-load" = {
    output_OK = "Load OK"
    output_WARN = "Load Warning"
    output_CRIT = "Load Critical"
  }
  "sim-mail_echo" = {
    output_OK = "Mail returned"
    output_WARN = "Mail returned slow"
    output_CRIT = "Mail lost"
  }
  "sim-mount_disk" = {
    output_OK = "disks mounted"
    output_WARN = "disks mounted"
    output_CRIT = "disks not mounted"
  }
  "sim-mysqld" = {
    output_OK = "mysql running"
    output_WARN = "mysql slow"
    output_CRIT = "mysql error"
  }
  "sim-mysql-db" = {
    output_OK = "login successful"
    output_WARN = "login slow"
    output_CRIT = "login failed"
  }
  "sim-mysql-repl" = {
    output_OK = "replication up to date"
    output_WARN = "replication more than 10s behind"
    output_CRIT = "replication not running"
  }
  "sim-ntp" = {
    output_OK = "up to date and running"
    output_WARN = "more than 1s behind"
    output_CRIT = "ntp not running"
  }
  "sim-procs" = {
    output_OK = "All Processes up and running"
    output_WARN = "Expected 2 Processes, got 1"
    output_CRIT = "No Process running"
  }
  "sim-smtp" = {
    output_OK = "Socket reachable"
    output_WARN = "Socket reachable"
    output_CRIT = "Socket unreachable"
  }
  "sim-ssh" = {
    output_OK = "SSH version 42"
    output_WARN = "SSH version 42"
    output_CRIT = "SSH not running"
  }
  "sim-storage" = {
    output_OK = "Storage running well"
    output_WARN = "Storage running out of ressources"
    output_CRIT = "Storage stopped"
  }
  "sim-updates" = {
    output_OK = "Everything is up to date"
    output_WARN = "2 updates ready to install"
    output_CRIT = "42 updates outstanding"
  }
  "sim-interface" = {
    output_OK = "UP"
    output_WARN = "Packet Loss"
    output_CRIT = "Down"
  }
}

// return random value between min and max
globals.perfRandom = function(min, max, is_int) {
  min = Math.ceil(min)
  max = Math.floor(max)
  var tmp = Math.floor(Math.random() * (max - min +1)) + min; 
  if (is_int) {
    tmp = Math.round(tmp)
  }
  //log("dummyPerf: random = " + tmp)
  return tmp
}
template CheckCommand "sim-command-template-defaults" {
  import "dummy"
  //Todo: better: 
  //vars.perfvalue = { 
  //  "OK" = {
  //    "min" = 0
  //    "max" = 5
  //    "is_int" = true
  //  }
  //}
  vars.perf_label = "random_perf"
  vars.output_OK = "Service working well"
  vars.output_warn = "Service running out of resources"
  vars.output_crit = "Error Fail"
  vars.perf_data_OK_value_min = 0
  vars.perf_data_OK_value_max = 5
  vars.perf_data_OK_value_is_int = true 
  vars.perf_data_warn_value_min = 6
  vars.perf_data_warn_value_max = 7
  vars.perf_data_warn_value_is_int = true 
  vars.perf_data_crit_value_min = 8
  vars.perf_data_crit_value_max = 10
  vars.perf_data_crit_value_is_int = true 
  vars.perf_data_warn = 6
  vars.perf_data_crit = 8
}

// Return Status and perfdata based on timeperiods
template CheckCommand "sim-command-template" {
  import "sim-command-template-defaults"
  vars.perf_OK = {{
    //log("dummyPerf: checkCommand OK:" + macro("$output_OK$") + macro("$perf_data_OK_value_min$"))
    var tmp = perfRandom(macro("$perf_data_OK_value_min$"),macro("$perf_data_OK_value_max$"),macro("$perf_data_OK_value_is_int$"))
    return tmp
  }}
  vars.perf_warn = {{ 
    var tmp = perfRandom(macro("$perf_data_warn_value_min$"),macro("$perf_data_warn_value_max$"),macro("$perf_data_warn_value_is_int$"))
    return tmp
  }}
  vars.perf_crit = {{
    var tmp = perfRandom(macro("$perf_data_crit_value_min$"),macro("$perf_data_crit_value_max$"),macro("$perf_data_crit_value_is_int$"))
    return tmp
  }}
  vars.dummy_state = {{
    var exit_code = 0
    if (get_host(macro("$host.name$")).state > 0) {
      return 2
    } 
    if (get_time_period(macro("$critical_period$")).is_inside) {
      return 2
    } 
    if (macro("$service.vars.sim_dep_host$")) {
      if (get_host(macro("$service.vars.sim_dep_host$")).state > 0) {
        return 2
      }
    }
    if (macro("$service.vars.cluster_dep_hosts$")) {
      var up_count = 0
      var cluster_nodes = macro("$host.vars.sim_clusternodes$")
      var min_crit = macro("$service.vars.cluster_dep_hosts.min_crit$")
      if (macro("$service.vars.cluster_dep_hosts.min_warn$")) {
        var min_warn = macro("$service.vars.cluster_dep_hosts.min_warn$")
      } else {
        var min_warn = 0
      }
      var exit_code = 0
      for (node in cluster_nodes) {
        if (get_host(node).state == 0) {
          up_count += 1
        }
      }
      if (up_count <= min_crit) {
        return 2
      } else {
        if (up_count <= min_warn ) {
          exit_code = 1
        }
      }
    }
    if (macro("$service.vars.sim_dep_service$")) {
      if (macro("$service.vars.sim_dep_host$")) {
        if (get_host(macro("$service.vars.sim_dep_host$")).state > 0) {
          return 2
        } else {
          if (get_service(macro("$service.vars.sim_dep_host$"), "sim-" + macro("$service.vars.sim_dep_service$")).state > 1) { 
            return 2
          }
        }
      } else {
        if (get_service(macro("$host.name$"), "sim-" + macro("$service.vars.sim_dep_service$")).state > 1) { 
          return 2
        }
      }
    }
    if (macro("$service.vars.cluster_dep_services$")) {
      var OK_count = 0
      var cluster_nodes = macro("$host.vars.sim_clusternodes$")
      var min_crit = macro("$service.vars.cluster_dep_services.min_crit$")
      if (macro("$service.vars.cluster_dep_services.min_warn$")) {
        var min_warn = macro("$service.vars.cluster_dep_services.min_warn$")
      } else {
        var min_warn = 0
      }
      for (node in cluster_nodes) {
        //log("cds: " + node + "crit: " + min_crit + "cds clusterservice: " + macro("$service.vars.cluster_dep_services.clusterservice$"));
        if (get_service(node, "sim-" + macro("$service.vars.cluster_dep_services.clusterservice$")).state == 0) {
          OK_count += 1
        }
      }
      if (OK_count <= min_crit) {
        return 2
      } else {
        if (OK_count <= min_warn) {
          exit_code = 1
        }
      }
    }
    if (get_time_period(macro("$service.vars.warning_period$")).is_inside) {
      return 1
    }
    if ( exit_code == 1 ) {
      return 1
    } else {
      return 0
    }
  }}
  vars.dummy_text = {{
    //log("dummyPerf: " + macro("$perf_OK$") + " " + macro("$perf_warn$") + " " + macro("$perf_crit$") + "threshold: " + macro("$perf_data_warn$") + ", " + macro("$perf_data_crit$")
    if (get_host(macro("$host.name$")).state > 0) {
      log("DepDownServiceText: " + macro("$host.name$"))
      sleep(15)
      return "check timed out"
    } 
    if (macro("$dummy_state$") == 2) {
      return macro("$output_crit$") + "| '" + macro("$perf_label$") + "'=" + macro("$perf_crit$") + ";" + macro("$perf_data_warn$") + ";" + macro("$perf_data_crit$") + macro("$perf_data_min$") + macro("$perf_data_max$")
    } else {
      if (macro("$dummy_state$") == 1) {
        return macro("$output_warn$") + "| '" + macro("$perf_label$") + "'=" + macro("$perf_warn$") + ";" + macro("$perf_data_warn$") + ";" + macro("$perf_data_crit$") + macro("$perf_data_min$") + macro("$perf_data_max$")
      } else {
        return macro("$output_OK$") + "| '" + macro("$perf_label$") + "'=" + macro("$perf_OK$") + ";" + macro("$perf_data_warn$") + ";" + macro("$perf_data_crit$") + macro("$perf_data_min$") + macro("$perf_data_max$")
      }
    }
  }}
}
object CheckCommand "sim_host-alive" {
  import "dummy"
  vars.UP_perf = {{ Math.random() * 80 }}
  vars.DOWN_perf = {{ Math.random() * 10 + 90 }}
  vars.dummy_state = {{
    // time based state
    if (get_time_period(macro("$down_period$")).is_inside) {
      return 2
    } else {
      if (macro("$host.vars.sim_dep_host$")) {
        if (get_host(node).state > 0) {
          return 2
        }
      }
      if (macro("$host.vars.cluster_dep_hosts$")) {
        var up_count = 0
        var cluster_nodes = macro("$host.vars.sim_clusternodes$")
        var min_crit = macro("$host.vars.cluster_dep_hosts.min_crit$")
        for (node in cluster_nodes) {
          if (get_host(node).state == 0) {
            up_count += 1
          }
        }
        if (up_count <= min_crit) {
          return 2
        }
      }
      return 0
    }
  }}
  vars.dummy_text = {{
   if (macro("$dummy_state$") == 2) {
      return "Host Down | 'host_random'=" + macro("$DOWN_perf$") + ";80;90;0;100"
    } else {
      return "Host Check was successful! | 'host_random'=" + macro("$UP_perf$") + ";80;90;0;100"
    }
  }}
}

for (simCommand => config in sim_commands) {
  object CheckCommand simCommand use (config) {
    import "sim-command-template"
    vars += config
  }
}
